AnswerProvider = X_OwnerUserId, AnswerDate = X_CreationDate)
Answers$AnswerDate = as.Date(Answers$AnswerDate)
Answers$Year = year(Answers$AnswerDate)
# filter only answered questions from table questions
Answered_Questions = Questions %>% filter(!is.na(AcceptedAnswer))
# format date columns
Comments$X_CreationDate = as.Date(Comments$X_CreationDate)
# extract year from date columns
Comments$Year = year(Comments$X_CreationDate)
# merge comments and questions
temp_comments = Comments %>%
select(X_PostId, X_UserId) %>%
rename(Question = X_PostId, Commentator = X_UserId)
temp_questions = Questions %>%
select(Question, AnswerSeeker, Year)
Comments_Questions = merge(temp_comments, temp_questions, by = 'Question')
Comments_Questions$Question_Id = NULL
Comments_Questions_2012 = Comments_Questions %>% filter(Year == 2012)
Comments_Questions_2013 = Comments_Questions %>% filter(Year == 2013)
Comments_Questions_2014 = Comments_Questions %>% filter(Year == 2014)
Comments_Questions_2015 = Comments_Questions %>% filter(Year == 2015)
Comments_Questions_2016 = Comments_Questions %>% filter(Year == 2016)
Comments_Questions$Year = NULL
Comments_Questions_2012$Year = NULL
Comments_Questions_2013$Year = NULL
Comments_Questions_2014$Year = NULL
Comments_Questions_2015$Year = NULL
Comments_Questions_2016$Year = NULL
rm(temp_questions, temp_comments)
# merge comments and answers
temp_comments = Comments %>%
select(X_PostId, X_UserId) %>%
rename(Answer = X_PostId, Commentator = X_UserId)
temp_answers = Answers %>%
select(Answer, AnswerProvider, Year)
Comments_Answers = merge(temp_comments, temp_answers, by = 'Answer')
Comments_Answers$Answer = NULL
Comments_Answers_2012 = Comments_Answers %>% filter(Year == 2012)
Comments_Answers_2013 = Comments_Answers %>% filter(Year == 2013)
Comments_Answers_2014 = Comments_Answers %>% filter(Year == 2014)
Comments_Answers_2015 = Comments_Answers %>% filter(Year == 2015)
Comments_Answers_2016 = Comments_Answers %>% filter(Year == 2016)
Comments_Answers$Year = NULL
Comments_Answers_2012$Year = NULL
Comments_Answers_2013$Year = NULL
Comments_Answers_2014$Year = NULL
Comments_Answers_2015$Year = NULL
Comments_Answers_2016$Year = NULL
rm(temp_answers, temp_comments)
# show total number of each user's answered questions (all dataset and yearly)
Freq.Ans_Quest = Answered_Questions %>%
group_by(AnswerSeeker) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_Quest_2012 = Answered_Questions %>%
filter(Year == 2012) %>%
group_by(AnswerSeeker) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_Quest_2013 = Answered_Questions %>%
filter(Year == 2013) %>%
group_by(AnswerSeeker) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_Quest_2014 = Answered_Questions %>%
filter(Year == 2014) %>%
group_by(AnswerSeeker) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_Quest_2015 = Answered_Questions %>%
filter(Year == 2015) %>%
group_by(AnswerSeeker) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_Quest_2016 = Answered_Questions %>%
filter(Year == 2016) %>%
group_by(AnswerSeeker) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
# show total number of each user's answers (all dataset and yearly)
Freq.Ans = Answers %>%
group_by(AnswerProvider) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_2012 = Answers %>%
filter(Year == 2012) %>%
group_by(AnswerProvider) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_2013 = Answers %>%
filter(Year == 2013) %>%
group_by(AnswerProvider) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_2014 = Answers %>%
filter(Year == 2014) %>%
group_by(AnswerProvider) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_2015 = Answers %>%
filter(Year == 2015) %>%
group_by(AnswerProvider) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Ans_2016 = Answers %>%
filter(Year == 2016) %>%
group_by(AnswerProvider) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
# show total number of each user's comments (all dataset and yearly)
Freq.Comm = Comments %>%
group_by(X_UserId) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Comm_2012 = Comments %>%
filter(Year == 2012) %>%
group_by(X_UserId) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Comm_2013 = Comments %>%
filter(Year == 2013) %>%
group_by(X_UserId) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Comm_2014 = Comments %>%
filter(Year == 2014) %>%
group_by(X_UserId) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Comm_2015 = Comments %>%
filter(Year == 2015) %>%
group_by(X_UserId) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
Freq.Comm_2016 = Comments %>%
filter(Year == 2016) %>%
group_by(X_UserId) %>%
summarise(Frequency=n()) %>%
arrange(desc(Frequency))
# Creating QA_All (answer provider -> answer seeker) tables (all dataset and yearly)
temp_Answers = Answers %>%
select(Question, Answer, AnswerProvider, Year)
temp_Questions = Questions %>%
select(Question, AnswerSeeker, AcceptedAnswer)
QA_All = merge(temp_Answers, temp_Questions, by='Question', all.x = T)
QA_All = QA_All %>% filter(!is.na(AnswerSeeker))
QA_All$Answer = NULL
QA_All$Question = NULL
QA_All_2012 = QA_All %>% filter(Year == 2012)
QA_All_2013 = QA_All %>% filter(Year == 2013)
QA_All_2014 = QA_All %>% filter(Year == 2014)
QA_All_2015 = QA_All %>% filter(Year == 2015)
QA_All_2016 = QA_All %>% filter(Year == 2016)
# Removing columns AnswerId and Year
QA_All$Year = NULL
QA_All_2012$Year = NULL
QA_All_2013$Year = NULL
QA_All_2014$Year = NULL
QA_All_2015$Year = NULL
QA_All_2016$Year = NULL
rm(temp_Answers, temp_Questions)
# Creating QA_Accepted (accepted answer provider only -> answer seeker) tables (all dataset and yearly)
temp_Answers = Answers %>%
select(Answer, AnswerProvider, Year)
temp_Answered_Questions = Answered_Questions %>%
select(AcceptedAnswer, AnswerSeeker) %>%
rename(Answer = AcceptedAnswer)
QA_Accepted = merge(temp_Answers, temp_Answered_Questions, by = 'Answer')
QA_Accepted$Answer = NULL
QA_Accepted_2012 = QA_Accepted %>% filter(Year == 2012)
QA_Accepted_2013 = QA_Accepted %>% filter(Year == 2013)
QA_Accepted_2014 = QA_Accepted %>% filter(Year == 2014)
QA_Accepted_2015 = QA_Accepted %>% filter(Year == 2015)
QA_Accepted_2016 = QA_Accepted %>% filter(Year == 2016)
# Removing columns AnswerId and Year
QA_Accepted$Year = NULL
QA_Accepted_2012$Year = NULL
QA_Accepted_2013$Year = NULL
QA_Accepted_2014$Year = NULL
QA_Accepted_2015$Year = NULL
QA_Accepted_2016$Year = NULL
rm(temp_Answers, temp_Answered_Questions)
###** Calculate Network's Scoring **###
library(igraph)
# For QA_All
# all dataset
sports_QAAll_g = graph.data.frame(QA_All, directed = T)
sports_QAAll_vertices = get.data.frame(sports_QAAll_g, what='vertices')
sports_QAAll_edges = get.data.frame(sports_QAAll_g, what='edges')
sports_QAAll_vertices$betweenness = betweenness(sports_QAAll_g)
sports_QAAll_vertices$closeness = closeness(sports_QAAll_g)
sports_QAAll_vertices$in_degree = degree(sports_QAAll_g, mode = 'in')
sports_QAAll_vertices$out_degree = degree(sports_QAAll_g, mode = 'out')
sports_QAAll_vertices$eccentricity = eccentricity(sports_QAAll_g)
colnames(sports_QAAll_vertices)[1] = 'user_id'
sports_QAAll_users = merge(sports_QAAll_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2012 dataset
sports_QAAll_2012_g = graph.data.frame(QA_All_2012, directed = T)
sports_QAAll_2012_vertices = get.data.frame(sports_QAAll_2012_g, what='vertices')
sports_QAAll_2012_edges = get.data.frame(sports_QAAll_2012_g, what='edges')
sports_QAAll_2012_vertices$betweenness = betweenness(sports_QAAll_2012_g)
sports_QAAll_2012_vertices$closeness = closeness(sports_QAAll_2012_g)
sports_QAAll_2012_vertices$in_degree = degree(sports_QAAll_2012_g, mode = 'in')
sports_QAAll_2012_vertices$out_degree = degree(sports_QAAll_2012_g, mode = 'out')
sports_QAAll_2012_vertices$eccentricity = eccentricity(sports_QAAll_2012_g)
colnames(sports_QAAll_2012_vertices)[1] = 'user_id'
sports_QAAll_2012_users = merge(sports_QAAll_2012_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2013
sports_QAAll_2013_g = graph.data.frame(QA_All_2013, directed = T)
sports_QAAll_2013_vertices = get.data.frame(sports_QAAll_2013_g, what='vertices')
sports_QAAll_2013_edges = get.data.frame(sports_QAAll_2013_g, what='edges')
sports_QAAll_2013_vertices$betweenness = betweenness(sports_QAAll_2013_g)
sports_QAAll_2013_vertices$closeness = closeness(sports_QAAll_2013_g)
sports_QAAll_2013_vertices$in_degree = degree(sports_QAAll_2013_g, mode = 'in')
sports_QAAll_2013_vertices$out_degree = degree(sports_QAAll_2013_g, mode = 'out')
sports_QAAll_2013_vertices$eccentricity = eccentricity(sports_QAAll_2013_g)
colnames(sports_QAAll_2013_vertices)[1] = 'user_id'
sports_QAAll_2013_users = merge(sports_QAAll_2013_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2014
sports_QAAll_2014_g = graph.data.frame(QA_All_2014, directed = T)
sports_QAAll_2014_vertices = get.data.frame(sports_QAAll_2014_g, what='vertices')
sports_QAAll_2014_edges = get.data.frame(sports_QAAll_2014_g, what='edges')
sports_QAAll_2014_vertices$betweenness = betweenness(sports_QAAll_2014_g)
sports_QAAll_2014_vertices$closeness = closeness(sports_QAAll_2014_g)
sports_QAAll_2014_vertices$in_degree = degree(sports_QAAll_2014_g, mode = 'in')
sports_QAAll_2014_vertices$out_degree = degree(sports_QAAll_2014_g, mode = 'out')
sports_QAAll_2014_vertices$eccentricity = eccentricity(sports_QAAll_2014_g)
colnames(sports_QAAll_2014_vertices)[1] = 'user_id'
sports_QAAll_2014_users = merge(sports_QAAll_2014_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2015
sports_QAAll_2015_g = graph.data.frame(QA_All_2015, directed = T)
sports_QAAll_2015_vertices = get.data.frame(sports_QAAll_2015_g, what='vertices')
sports_QAAll_2015_edges = get.data.frame(sports_QAAll_2015_g, what='edges')
sports_QAAll_2015_vertices$betweenness = betweenness(sports_QAAll_2015_g)
sports_QAAll_2015_vertices$closeness = closeness(sports_QAAll_2015_g)
sports_QAAll_2015_vertices$in_degree = degree(sports_QAAll_2015_g, mode = 'in')
sports_QAAll_2015_vertices$out_degree = degree(sports_QAAll_2015_g, mode = 'out')
sports_QAAll_2015_vertices$eccentricity = eccentricity(sports_QAAll_2015_g)
colnames(sports_QAAll_2015_vertices)[1] = 'user_id'
sports_QAAll_2015_users = merge(sports_QAAll_2015_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2016
sports_QAAll_2016_g = graph.data.frame(QA_All_2016, directed = T)
sports_QAAll_2016_vertices = get.data.frame(sports_QAAll_2016_g, what='vertices')
sports_QAAll_2016_edges = get.data.frame(sports_QAAll_2016_g, what='edges')
sports_QAAll_2016_vertices$betweenness = betweenness(sports_QAAll_2016_g)
sports_QAAll_2016_vertices$closeness = closeness(sports_QAAll_2016_g)
sports_QAAll_2016_vertices$in_degree = degree(sports_QAAll_2016_g, mode = 'in')
sports_QAAll_2016_vertices$out_degree = degree(sports_QAAll_2016_g, mode = 'out')
sports_QAAll_2016_vertices$eccentricity = eccentricity(sports_QAAll_2016_g)
colnames(sports_QAAll_2016_vertices)[1] = 'user_id'
sports_QAAll_2016_users = merge(sports_QAAll_2016_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# For QA_Accepted
# all dataset
sports_QAAcc_g = graph.data.frame(QA_Accepted, directed = T)
sports_QAAcc_vertices = get.data.frame(sports_QAAcc_g, what='vertices')
sports_QAAcc_edges = get.data.frame(sports_QAAcc_g, what='edges')
sports_QAAcc_vertices$betweenness = betweenness(sports_QAAcc_g)
sports_QAAcc_vertices$closeness = closeness(sports_QAAcc_g)
sports_QAAcc_vertices$in_degree = degree(sports_QAAcc_g, mode = 'in')
sports_QAAcc_vertices$out_degree = degree(sports_QAAcc_g, mode = 'out')
sports_QAAcc_vertices$eccentricity = eccentricity(sports_QAAcc_g)
colnames(sports_QAAcc_vertices)[1] = 'user_id'
sports_QAAcc_users = merge(sports_QAAcc_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2012 dataset
sports_QAAcc_2012_g = graph.data.frame(QA_Accepted_2012, directed = T)
sports_QAAcc_2012_vertices = get.data.frame(sports_QAAcc_2012_g, what='vertices')
sports_QAAcc_2012_edges = get.data.frame(sports_QAAcc_2012_g, what='edges')
sports_QAAcc_2012_vertices$betweenness = betweenness(sports_QAAcc_2012_g)
sports_QAAcc_2012_vertices$closeness = closeness(sports_QAAcc_2012_g)
sports_QAAcc_2012_vertices$in_degree = degree(sports_QAAcc_2012_g, mode = 'in')
sports_QAAcc_2012_vertices$out_degree = degree(sports_QAAcc_2012_g, mode = 'out')
sports_QAAcc_2012_vertices$eccentricity = eccentricity(sports_QAAcc_2012_g)
colnames(sports_QAAcc_2012_vertices)[1] = 'user_id'
sports_QAAcc_2012_users = merge(sports_QAAcc_2012_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2013
sports_QAAcc_2013_g = graph.data.frame(QA_Accepted_2013, directed = T)
sports_QAAcc_2013_vertices = get.data.frame(sports_QAAcc_2013_g, what='vertices')
sports_QAAcc_2013_edges = get.data.frame(sports_QAAcc_2013_g, what='edges')
sports_QAAcc_2013_vertices$betweenness = betweenness(sports_QAAcc_2013_g)
sports_QAAcc_2013_vertices$closeness = closeness(sports_QAAcc_2013_g)
sports_QAAcc_2013_vertices$in_degree = degree(sports_QAAcc_2013_g, mode = 'in')
sports_QAAcc_2013_vertices$out_degree = degree(sports_QAAcc_2013_g, mode = 'out')
sports_QAAcc_2013_vertices$eccentricity = eccentricity(sports_QAAcc_2013_g)
colnames(sports_QAAcc_2013_vertices)[1] = 'user_id'
sports_QAAcc_2013_users = merge(sports_QAAcc_2013_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2014
sports_QAAcc_2014_g = graph.data.frame(QA_Accepted_2014, directed = T)
sports_QAAcc_2014_vertices = get.data.frame(sports_QAAcc_2014_g, what='vertices')
sports_QAAcc_2014_edges = get.data.frame(sports_QAAcc_2014_g, what='edges')
sports_QAAcc_2014_vertices$betweenness = betweenness(sports_QAAcc_2014_g)
sports_QAAcc_2014_vertices$closeness = closeness(sports_QAAcc_2014_g)
sports_QAAcc_2014_vertices$in_degree = degree(sports_QAAcc_2014_g, mode = 'in')
sports_QAAcc_2014_vertices$out_degree = degree(sports_QAAcc_2014_g, mode = 'out')
sports_QAAcc_2014_vertices$eccentricity = eccentricity(sports_QAAcc_2014_g)
colnames(sports_QAAcc_2014_vertices)[1] = 'user_id'
sports_QAAcc_2014_users = merge(sports_QAAcc_2014_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2015
sports_QAAcc_2015_g = graph.data.frame(QA_Accepted_2015, directed = T)
sports_QAAcc_2015_vertices = get.data.frame(sports_QAAcc_2015_g, what='vertices')
sports_QAAcc_2015_edges = get.data.frame(sports_QAAcc_2015_g, what='edges')
sports_QAAcc_2015_vertices$betweenness = betweenness(sports_QAAcc_2015_g)
sports_QAAcc_2015_vertices$closeness = closeness(sports_QAAcc_2015_g)
sports_QAAcc_2015_vertices$in_degree = degree(sports_QAAcc_2015_g, mode = 'in')
sports_QAAcc_2015_vertices$out_degree = degree(sports_QAAcc_2015_g, mode = 'out')
sports_QAAcc_2015_vertices$eccentricity = eccentricity(sports_QAAcc_2015_g)
colnames(sports_QAAcc_2015_vertices)[1] = 'user_id'
sports_QAAcc_2015_users = merge(sports_QAAcc_2015_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2016
sports_QAAcc_2016_g = graph.data.frame(QA_Accepted_2016, directed = T)
sports_QAAcc_2016_vertices = get.data.frame(sports_QAAcc_2016_g, what='vertices')
sports_QAAcc_2016_edges = get.data.frame(sports_QAAcc_2016_g, what='edges')
sports_QAAcc_2016_vertices$betweenness = betweenness(sports_QAAcc_2016_g)
sports_QAAcc_2016_vertices$closeness = closeness(sports_QAAcc_2016_g)
sports_QAAcc_2016_vertices$in_degree = degree(sports_QAAcc_2016_g, mode = 'in')
sports_QAAcc_2016_vertices$out_degree = degree(sports_QAAcc_2016_g, mode = 'out')
sports_QAAcc_2016_vertices$eccentricity = eccentricity(sports_QAAcc_2016_g)
colnames(sports_QAAcc_2016_vertices)[1] = 'user_id'
sports_QAAcc_2016_users = merge(sports_QAAcc_2016_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# for Comments_Questions
# all dataset
sportsCQ_g = graph.data.frame(Comments_Questions, directed = T)
sportsCQ_vertices = get.data.frame(sportsCQ_g, what='vertices')
sportsCQ_vertices$betweenness = betweenness(sportsCQ_g)
sportsCQ_vertices$closeness = closeness(sportsCQ_g)
sportsCQ_vertices$in_degree = degree(sportsCQ_g, mode = 'in')
sportsCQ_vertices$out_degree = degree(sportsCQ_g, mode = 'out')
sportsCQ_vertices$eccentricity = eccentricity(sportsCQ_g)
colnames(sportsCQ_vertices)[1] = 'user_id'
sportsCQ_users = merge(sportsCQ_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2012 dataset
sportsCQ_2012_g = graph.data.frame(Comments_Questions_2012, directed = T)
sportsCQ_2012_vertices = get.data.frame(sportsCQ_2012_g, what='vertices')
sportsCQ_2012_vertices$betweenness = betweenness(sportsCQ_2012_g)
sportsCQ_2012_vertices$closeness = closeness(sportsCQ_2012_g)
sportsCQ_2012_vertices$in_degree = degree(sportsCQ_2012_g, mode = 'in')
sportsCQ_2012_vertices$out_degree = degree(sportsCQ_2012_g, mode = 'out')
sportsCQ_2012_vertices$eccentricity = eccentricity(sportsCQ_2012_g)
colnames(sportsCQ_2012_vertices)[1] = 'user_id'
sportsCQ_2012_users = merge(sportsCQ_2012_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2013
sportsCQ_2013_g = graph.data.frame(Comments_Questions_2013, directed = T)
sportsCQ_2013_vertices = get.data.frame(sportsCQ_2013_g, what='vertices')
sportsCQ_2013_vertices$betweenness = betweenness(sportsCQ_2013_g)
sportsCQ_2013_vertices$closeness = closeness(sportsCQ_2013_g)
sportsCQ_2013_vertices$in_degree = degree(sportsCQ_2013_g, mode = 'in')
sportsCQ_2013_vertices$out_degree = degree(sportsCQ_2013_g, mode = 'out')
sportsCQ_2013_vertices$eccentricity = eccentricity(sportsCQ_2013_g)
colnames(sportsCQ_2013_vertices)[1] = 'user_id'
sportsCQ_2013_users = merge(sportsCQ_2013_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2014
sportsCQ_2014_g = graph.data.frame(Comments_Questions_2014, directed = T)
sportsCQ_2014_vertices = get.data.frame(sportsCQ_2014_g, what='vertices')
sportsCQ_2014_vertices$betweenness = betweenness(sportsCQ_2014_g)
sportsCQ_2014_vertices$closeness = closeness(sportsCQ_2014_g)
sportsCQ_2014_vertices$in_degree = degree(sportsCQ_2014_g, mode = 'in')
sportsCQ_2014_vertices$out_degree = degree(sportsCQ_2014_g, mode = 'out')
sportsCQ_2014_vertices$eccentricity = eccentricity(sportsCQ_2014_g)
colnames(sportsCQ_2014_vertices)[1] = 'user_id'
sportsCQ_2014_users = merge(sportsCQ_2014_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2015
sportsCQ_2015_g = graph.data.frame(Comments_Questions_2015, directed = T)
sportsCQ_2015_vertices = get.data.frame(sportsCQ_2015_g, what='vertices')
sportsCQ_2015_vertices$betweenness = betweenness(sportsCQ_2015_g)
sportsCQ_2015_vertices$closeness = closeness(sportsCQ_2015_g)
sportsCQ_2015_vertices$in_degree = degree(sportsCQ_2015_g, mode = 'in')
sportsCQ_2015_vertices$out_degree = degree(sportsCQ_2015_g, mode = 'out')
sportsCQ_2015_vertices$eccentricity = eccentricity(sportsCQ_2015_g)
colnames(sportsCQ_2015_vertices)[1] = 'user_id'
sportsCQ_2015_users = merge(sportsCQ_2015_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2016
sportsCQ_2016_g = graph.data.frame(Comments_Questions_2016, directed = T)
sportsCQ_2016_vertices = get.data.frame(sportsCQ_2016_g, what='vertices')
sportsCQ_2016_vertices$betweenness = betweenness(sportsCQ_2016_g)
sportsCQ_2016_vertices$closeness = closeness(sportsCQ_2016_g)
sportsCQ_2016_vertices$in_degree = degree(sportsCQ_2016_g, mode = 'in')
sportsCQ_2016_vertices$out_degree = degree(sportsCQ_2016_g, mode = 'out')
sportsCQ_2016_vertices$eccentricity = eccentricity(sportsCQ_2016_g)
colnames(sportsCQ_2016_vertices)[1] = 'user_id'
sportsCQ_2016_users = merge(sportsCQ_2016_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# for Comments_Answers
# all dataset
sportsCA_g = graph.data.frame(Comments_Answers, directed = T)
sportsCA_vertices = get.data.frame(sportsCA_g, what='vertices')
sportsCA_vertices$betweenness = betweenness(sportsCA_g)
sportsCA_vertices$closeness = closeness(sportsCA_g)
sportsCA_vertices$in_degree = degree(sportsCA_g, mode = 'in')
sportsCA_vertices$out_degree = degree(sportsCA_g, mode = 'out')
sportsCA_vertices$eccentricity = eccentricity(sportsCA_g)
colnames(sportsCA_vertices)[1] = 'user_id'
sportsCA_users = merge(sportsCA_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2012 dataset
sportsCA_2012_g = graph.data.frame(Comments_Answers_2012, directed = T)
sportsCA_2012_vertices = get.data.frame(sportsCA_2012_g, what='vertices')
sportsCA_2012_vertices$betweenness = betweenness(sportsCA_2012_g)
sportsCA_2012_vertices$closeness = closeness(sportsCA_2012_g)
sportsCA_2012_vertices$in_degree = degree(sportsCA_2012_g, mode = 'in')
sportsCA_2012_vertices$out_degree = degree(sportsCA_2012_g, mode = 'out')
sportsCA_2012_vertices$eccentricity = eccentricity(sportsCA_2012_g)
colnames(sportsCA_2012_vertices)[1] = 'user_id'
sportsCA_2012_users = merge(sportsCA_2012_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2013
sportsCA_2013_g = graph.data.frame(Comments_Answers_2013, directed = T)
sportsCA_2013_vertices = get.data.frame(sportsCA_2013_g, what='vertices')
sportsCA_2013_vertices$betweenness = betweenness(sportsCA_2013_g)
sportsCA_2013_vertices$closeness = closeness(sportsCA_2013_g)
sportsCA_2013_vertices$in_degree = degree(sportsCA_2013_g, mode = 'in')
sportsCA_2013_vertices$out_degree = degree(sportsCA_2013_g, mode = 'out')
sportsCA_2013_vertices$eccentricity = eccentricity(sportsCA_2013_g)
colnames(sportsCA_2013_vertices)[1] = 'user_id'
sportsCA_2013_users = merge(sportsCA_2013_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2014
sportsCA_2014_g = graph.data.frame(Comments_Answers_2014, directed = T)
sportsCA_2014_vertices = get.data.frame(sportsCA_2014_g, what='vertices')
sportsCA_2014_vertices$betweenness = betweenness(sportsCA_2014_g)
sportsCA_2014_vertices$closeness = closeness(sportsCA_2014_g)
sportsCA_2014_vertices$in_degree = degree(sportsCA_2014_g, mode = 'in')
sportsCA_2014_vertices$out_degree = degree(sportsCA_2014_g, mode = 'out')
sportsCA_2014_vertices$eccentricity = eccentricity(sportsCA_2014_g)
colnames(sportsCA_2014_vertices)[1] = 'user_id'
sportsCA_2014_users = merge(sportsCA_2014_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2015
sportsCA_2015_g = graph.data.frame(Comments_Answers_2015, directed = T)
sportsCA_2015_vertices = get.data.frame(sportsCA_2015_g, what='vertices')
sportsCA_2015_vertices$betweenness = betweenness(sportsCA_2015_g)
sportsCA_2015_vertices$closeness = closeness(sportsCA_2015_g)
sportsCA_2015_vertices$in_degree = degree(sportsCA_2015_g, mode = 'in')
sportsCA_2015_vertices$out_degree = degree(sportsCA_2015_g, mode = 'out')
sportsCA_2015_vertices$eccentricity = eccentricity(sportsCA_2015_g)
colnames(sportsCA_2015_vertices)[1] = 'user_id'
sportsCA_2015_users = merge(sportsCA_2015_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
# 2016
sportsCA_2016_g = graph.data.frame(Comments_Answers_2016, directed = T)
sportsCA_2016_vertices = get.data.frame(sportsCA_2016_g, what='vertices')
sportsCA_2016_vertices$betweenness = betweenness(sportsCA_2016_g)
sportsCA_2016_vertices$closeness = closeness(sportsCA_2016_g)
sportsCA_2016_vertices$in_degree = degree(sportsCA_2016_g, mode = 'in')
sportsCA_2016_vertices$out_degree = degree(sportsCA_2016_g, mode = 'out')
sportsCA_2016_vertices$eccentricity = eccentricity(sportsCA_2016_g)
colnames(sportsCA_2016_vertices)[1] = 'user_id'
sportsCA_2016_users = merge(sportsCA_2016_vertices, Users, by.x = 'user_id', by.y = 'X_Id', all.x = T)
par(mfrow=c(1,2))
plot(density(sports_QAAcc_users$out_degree), main='Out-degree distribution')
plot(density(sports_QAAcc_users$in_degree), main='In-degree distribution')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
library(ggplot2)
par(mfrow=c(2,3))
#2012
topTwenty12 = Freq.Ans_2012[1:10,]
temp = Users %>% select(X_Id, X_DisplayName)
topTwenty12 = merge(topTwenty12, temp, by.x = 'AnswerProvider', by.y = 'X_Id')
bar = barplot(topTwenty12$Frequency, main="Top 10 Answer providers - 2012", xlab="Provider")
text(bar,par("usr")[3],labels=topTwenty12$X_DisplayName,srt=45,offset=1,adj=1,xpd=TRUE)
#2013
topTwenty13 = Freq.Ans_2013[1:10,]
temp = Users %>% select(X_Id, X_DisplayName)
topTwenty13 = merge(topTwenty13, temp, by.x = 'AnswerProvider', by.y = 'X_Id')
bar = barplot(topTwenty13$Frequency, main="Top 10 Answer providers - 2013", xlab="Provider")
text(bar,par("usr")[3],labels=topTwenty13$X_DisplayName,srt=45,offset=1,adj=1,xpd=TRUE)
#2014
topTwenty14 = Freq.Ans_2014[1:10,]
temp = Users %>% select(X_Id, X_DisplayName)
topTwenty14 = merge(topTwenty14, temp, by.x = 'AnswerProvider', by.y = 'X_Id')
bar = barplot(topTwenty14$Frequency, main="Top 10 Answer providers - 2014", xlab="Provider")
text(bar,par("usr")[3],labels=topTwenty14$X_DisplayName,srt=45,offset=1,adj=1,xpd=TRUE)
#2015
topTwenty15 = Freq.Ans_2015[1:10,]
temp = Users %>% select(X_Id, X_DisplayName)
topTwenty15 = merge(topTwenty15, temp, by.x = 'AnswerProvider', by.y = 'X_Id')
bar = barplot(topTwenty15$Frequency, main="Top 10 Answer providers - 2015", xlab="Provider")
text(bar,par("usr")[3],labels=topTwenty15$X_DisplayName,srt=45,offset=1,adj=1,xpd=TRUE)
#2016
topTwenty16 = Freq.Ans_2016[1:10,]
temp = Users %>% select(X_Id, X_DisplayName)
topTwenty16 = merge(topTwenty16, temp, by.x = 'AnswerProvider', by.y = 'X_Id')
bar = barplot(topTwenty16$Frequency, main="Top 10 Answer providers - 2016", xlab="Provider")
text(bar,par("usr")[3],labels=topTwenty16$X_DisplayName,srt=45,offset=1,adj=1,xpd=TRUE)
QA_Accepted_graph = graph.data.frame(QA_Accepted, sports_QAAcc_users, directed = T)
V(QA_Accepted_graph)$shape<-"circle"
V(QA_Accepted_graph)$size = 2
V(QA_Accepted_graph)$size = (degree(QA_Accepted_graph,mode = 'out')/10)+1
V(QA_Accepted_graph)$label = V(QA_Accepted_graph)$name
V(QA_Accepted_graph)$label.cex = 0.5
l <- layout.fruchterman.reingold(QA_Accepted_graph)
E(QA_Accepted_graph)$arrow.size <- 0.02
plot(QA_Accepted_graph,
layout=l *10,
vertex.shape='circle',
vertex.label = ifelse(degree(QA_Accepted_graph,mode = 'out') > 30, V(QA_Accepted_graph)$label, NA),
vertex.label.color='black',
vertex.label.font = 2,
main='QA accepted network - OUT degree highlighted')
# plot QA accepted network (bigger dot means higher IN degree)
E(QA_Accepted_graph)$arrow.size <- 0.02
plot(QA_Accepted_graph,
layout=layout.fruchterman.reingold,
vertex.size = (degree(QA_Accepted_graph,mode = 'in')/10)+1,
vertex.shape='circle',
vertex.label = ifelse(degree(QA_Accepted_graph,mode = 'in') > 30, V(QA_Accepted_graph)$label, NA),
vertex.label.color='black',
vertex.label.font = 2,
main='QA accepted network - IN degree highlighted')
E(QA_Accepted_graph)$arrow.size <- 0.02
plot(QA_Accepted_graph,
layout=l *10,
vertex.shape='circle',
vertex.label = ifelse(degree(QA_Accepted_graph,mode = 'out') > 30, V(QA_Accepted_graph)$label, NA),
vertex.label.color='black',
vertex.label.font = 2,
main='QA accepted network - OUT degree highlighted')

?igraph.vertex.shapes
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
plot(test_graph, layout=l*1, vertex.shape='nil')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
plot(test_graph, layout=l*1, vertex.shape='triangle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
plot(test_graph, layout=l*1, vertex.shape='rectangle')
plot(test_graph, layout=l*1, vertex.shape='vrectangle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
plot(test_graph, layout=l*1, vertex.shape='vrectangle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
plot(test_graph, layout=l*1, vertex.shape='none')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
plot(test_graph, layout=l*1, vertex.shape='square')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
E(test_graph)$weight <- edge.betweenness(g)
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
E(test_graph)$weight <- edge.betweenness(test_graph)
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = F)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
E(test_graph)$weight <- edge.betweenness(test_graph)
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
E(test_graph)$arrow.size <- 0.1
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
#E(test_graph)$arrow.size <- 0.1
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[1:6,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
E(test_graph)$arrow.size <- 0.1
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.kamada.kawai(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
E(test_graph)$arrow.size <- 0.1
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
E(test_graph)$arrow.size <- 0.1
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
V(test_graph)$size = 1
E(test_graph)$arrow.size <- 0.1
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
V(test_graph)$size = 1
E(test_graph)$arrow.size <- 0.01
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
V(test_graph)$size = 1
V(test_graph)$label = 'NA'
E(test_graph)$arrow.size <- 0.01
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
V(test_graph)$size = 1
V(test_graph)$label = NA
E(test_graph)$arrow.size <- 0.01
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
V(test_graph)$size = 1
V(test_graph)$label = NA
E(test_graph)$arrow.size <- 0.05
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
V(test_graph)$color <- 'white'
V(test_graph)$color <- 'dodgerblue'
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
V(test_graph)$size = 2
V(test_graph)$label = NA
E(test_graph)$arrow.size <- 0.05
plot(test_graph, layout=l*1, vertex.shape='circle')
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
#V(test_graph)$color <- 'white'
#V(test_graph)$color <- 'dodgerblue'
outDegree = degree(test_graph, mode = 'out')
fine = 500 # this will adjust the resolving power.
palette = colorRampPalette(c('red','green'))
#this gives you the colors you want for every point
graphCol = palette(fine)[as.numeric(cut(outDegree,breaks = fine))]
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
V(test_graph)$size = 2
V(test_graph)$label = NA
E(test_graph)$arrow.size <- 0.05
plot(test_graph, layout=l*1, vertex.shape='circle', vertex.color=graphCol)
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
#V(test_graph)$color <- 'white'
#V(test_graph)$color <- 'dodgerblue'
outDegree = degree(test_graph, mode = 'out')
fine = 500 # this will adjust the resolving power.
palette = colorRampPalette(c('red','green'))
#this gives you the colors you want for every point
graphCol = palette(fine)[as.numeric(cut(outDegree,breaks = fine))]
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
V(test_graph)$size = 2
V(test_graph)$label = NA
E(test_graph)$arrow.size <- 0.05
plot(test_graph, layout=l*1, vertex.shape='circle', vertex.color=rainbow(degree(g,mode = 'out'), start=0, end=2/6))
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
# plot degree distribution
# get adjacency matrix
adj = get.adjacency(test_graph)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
#V(test_graph)$color <- 'white'
#V(test_graph)$color <- 'dodgerblue'
outDegree = degree(test_graph, mode = 'out')
fine = 500 # this will adjust the resolving power.
palette = colorRampPalette(c('red','green'))
#this gives you the colors you want for every point
graphCol = palette(fine)[as.numeric(cut(outDegree,breaks = fine))]
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
V(test_graph)$size = 2
V(test_graph)$label = NA
E(test_graph)$arrow.size <- 0.05
plot(test_graph, layout=l*1, vertex.shape='circle', vertex.color=rainbow(degree(test_graph,mode = 'out'), start=0, end=2/6))
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
# plot degree distribution
# plot QA accepted network
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
#V(test_graph)$color <- 'white'
#V(test_graph)$color <- 'dodgerblue'
outDegree = degree(test_graph, mode = 'out')
fine = 500 # this will adjust the resolving power.
palette = colorRampPalette(c('red','green'))
#this gives you the colors you want for every point
graphCol = palette(fine)[as.numeric(cut(outDegree,breaks = fine))]
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
#V(test_graph)$size = 2
V(test_graph)$size<-degree(test_graph,mode = 'out')/10
V(test_graph)$label = NA
E(test_graph)$arrow.size <- 0.05
plot(test_graph, layout=l*1, vertex.shape='circle')
# get adjacency matrix
adj = get.adjacency(test_graph)
library(igraph)
library(shiny)
library(networkD3)
library(dplyr)
# plot degree distribution
# plot QA accepted network
subset = QA_Accepted[,]
test_graph = graph.data.frame(subset, directed = T)
#plot(test_graph, layout=layout.fruchterman.reingold)
#plot the network
l <- layout.fruchterman.reingold(test_graph)
#V(test_graph)$color <- 'white'
#V(test_graph)$color <- 'dodgerblue'
outDegree = degree(test_graph, mode = 'out')
fine = 500 # this will adjust the resolving power.
palette = colorRampPalette(c('red','green'))
#this gives you the colors you want for every point
graphCol = palette(fine)[as.numeric(cut(outDegree,breaks = fine))]
V(test_graph)$shape<-"circle"
V(test_graph)$shape<-"circle"
#V(test_graph)$size = 2
V(test_graph)$size<-degree(test_graph,mode = 'out')/10
V(test_graph)$label = NA
E(test_graph)$arrow.size <- 0.05
plot(test_graph, layout=l, vertex.shape='circle')
# get adjacency matrix
adj = get.adjacency(test_graph)
